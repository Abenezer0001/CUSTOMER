import { LLMOutputBlock, LookBackFunction, LLMOutputMatcher } from '@llm-ui/react';
import z, { ZodSchema } from 'zod';

type JsonBlockOptionsComplete = {
    type: string;
    startChar: string;
    endChar: string;
    defaultVisible: boolean;
    visibleKeyPaths: string[];
    invisibleKeyPaths: string[];
    typeKey: string;
};
type JsonBlockOptions = Partial<Omit<JsonBlockOptionsComplete, "type">> & Pick<JsonBlockOptionsComplete, "type">;

declare const jsonBlock: (options: JsonBlockOptions) => LLMOutputBlock;

declare const jsonBlockExample: <Schema extends z.ZodTypeAny = z.ZodType<undefined, z.ZodTypeDef, undefined>>({ schema, example, options, }: {
    schema: Schema;
    example: z.infer<Schema>;
    options: JsonBlockOptions;
}) => string;

declare const jsonBlockPrompt: <Schema extends z.ZodTypeAny = z.ZodType<undefined, z.ZodTypeDef, undefined>>({ name, schema, examples, options, }: {
    name: string;
    schema: Schema;
    examples: z.infer<Schema>[];
    options: JsonBlockOptions;
}) => string;

declare const jsonBlockSchema: (zodSchema: ZodSchema) => string;

declare const jsonBlockLookBack: (userOptions: JsonBlockOptions) => LookBackFunction;

declare const findCompleteJsonBlock: (userOptions: JsonBlockOptions) => LLMOutputMatcher;
declare const findPartialJsonBlock: (userOptions: JsonBlockOptions) => LLMOutputMatcher;

declare const parseJson5: (json5: string) => any;

export { type JsonBlockOptions, findCompleteJsonBlock, findPartialJsonBlock, jsonBlock, jsonBlockExample, jsonBlockLookBack, jsonBlockPrompt, jsonBlockSchema, parseJson5 };
